<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wasinski&#39;s Blog</title>
    <link>https://wasinski.dev/post/</link>
    <description>Recent content in Posts on Wasinski&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Dec 2020 06:00:00 +0000</lastBuildDate><atom:link href="https://wasinski.dev/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comparison of Dependency Injection Libraries in Python, and my favorite one</title>
      <link>https://wasinski.dev/comparison-of-dependency-injection-libraries-in-python/</link>
      <pubDate>Mon, 07 Dec 2020 06:00:00 +0000</pubDate>
      
      <guid>https://wasinski.dev/comparison-of-dependency-injection-libraries-in-python/</guid>
      <description>Comparison of Dependency Injection Libraries in Python, and my favorite one About Dependency Injection In one of my last posts, I gave an introduction to DI pattern: why it is crucial for software projects &amp;amp; how it differs from Service Locator patterns. Long story short using DI supports Low Coupling &amp;amp; High Cohesion in turn giving us great testability and configurability.
Short overview of available DI libraries in Python DI is not a commonly used concept in the Python community, actually often it&amp;rsquo;s quite neglected, because &amp;ldquo;Python is not Java&amp;rdquo;, obviously, but this does not mean that we should not strive to write good, testable code, and that&amp;rsquo;s the reason why we should use DI.</description>
    </item>
    
    <item>
      <title>Timezone handling pitfalls II</title>
      <link>https://wasinski.dev/timezone-handling-pitfalls-2/</link>
      <pubDate>Fri, 02 Oct 2020 12:00:00 +0000</pubDate>
      
      <guid>https://wasinski.dev/timezone-handling-pitfalls-2/</guid>
      <description>Timezone handling pitfalls - part 2 This time I will focus on issues that arise when multiple users have to coordinate to a particular time, but they still can be in different timezones.
Note that this is a continuation from the previous post which you can find here.
Let&amp;rsquo;s recall our example domain:
 we are dealing with task scheduling the user can schedule a task for an arbitrary day in the future, and when that day comes she can mark it as done our users travel a lot, so they do not stick to just one timezone, we would like to allow them to complete the tasks wherever they currently are  which led us to implement floating timezones as I like to call it - business logic dependent on the user&amp;rsquo;s local timezone, and storing the dates in the naive form (not timezone-aware).</description>
    </item>
    
    <item>
      <title>Is that Dependency Injection or Service Locator Pattern?</title>
      <link>https://wasinski.dev/dependency-injection-service-locator-1/</link>
      <pubDate>Sat, 19 Sep 2020 12:00:00 +0000</pubDate>
      
      <guid>https://wasinski.dev/dependency-injection-service-locator-1/</guid>
      <description>Is that Dependency Injection or Service Locator Pattern? I have to admit to something. For the last 2 years, I was using Service Locator Pattern in one of my projects while being completely convinced that I was using Dependency Injection, but it turns out that I&amp;rsquo;m not alone in making such a mistake. What are the differences, what are the consequences of being wrong, and how to distinguish these two patterns?</description>
    </item>
    
    <item>
      <title>Timezone handling pitfalls I</title>
      <link>https://wasinski.dev/timezone-handling-pitfalls-1/</link>
      <pubDate>Wed, 05 Aug 2020 12:00:00 +0000</pubDate>
      
      <guid>https://wasinski.dev/timezone-handling-pitfalls-1/</guid>
      <description>Timezone handling pitfalls I Short intro of the domain Recently I have the pleasure to work as technology leader on a project that requires proper implementation of timezone handling, over some time I learned, sometimes the hard way quite a lot on this topic.
Let us introduce an example domain: task scheduling, the user can schedule a task for an arbitrary day in the future, and when that day comes she can marked it as done.</description>
    </item>
    
  </channel>
</rss>
